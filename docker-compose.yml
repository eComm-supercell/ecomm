version: '3'
services:
  auth:
    container_name: auth
    build:
      context: .
      dockerfile: Dockerfile.auth
      target: build
    restart: on-failure
    ports:
      - 4000:4000
    volumes:
      - .:/app
      - exclude:/app/node_modules/
    command: bash -c "dotenv -e .env.prod -- npx prisma migrate deploy && npm run start:prod:auth"

    depends_on:
      - postgres
      - redis
      - meilisearch
      - minio
    networks:
      - web
  assets:
    container_name: assets
    build:
      context: .
      dockerfile: Dockerfile.assets
      target: build
    restart: on-failure
    ports:
      - 5000:5000
    volumes:
      - .:/app
      - exclude:/app/node_modules/
    command: npm run start:prod:assets
    depends_on:
      - minio
      - postgres
    networks:
      - web
  shops:
    container_name: shops
    build:
      context: .
      dockerfile: Dockerfile.shops
      target: production
    restart: on-failure
    ports:
      - 3001:3001
    volumes:
      - .:/app
      - exclude:/app/node_modules/
    command: npm run start:prod:shops
    depends_on:
      - postgres
      - redis
      - meilisearch
      - auth
      - assets
    networks:
      - web
  admins:
    container_name: admins
    build:
      context: .
      dockerfile: Dockerfile.admins
      target: production
    restart: on-failure
    ports:
      - 3002:3002
    volumes:
      - .:/app
      - exclude:/app/node_modules/
    command: npm run start:prod:admins
    depends_on:
      - postgres
      - redis
      - meilisearch
      - auth
      - assets
    networks:
      - web
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgresql
    container_name: postgres
    command: ['-p', '5433']
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - web
  redis:
    image: redis:latest
    container_name: redis
    command: --port 6378
    networks:
      - web
    depends_on:
      - postgres
  meilisearch:
    image: getmeili/meilisearch:v1.2
    container_name: meilisearch
    environment:
      - http_proxy
      - https_proxy
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKeyForProduction}
      - MEILI_NO_ANALYTICS=${MEILI_NO_ANALYTICS:-false}
      - MEILI_ENV=${MEILI_ENV:-production}
      - MEILI_LOG_LEVEL
      - MEILI_DB_PATH=${MEILI_DB_PATH:-/data.ms}
    ports:
      - ${MEILI_PORT:-7700}:7700
    networks:
      - web
    volumes:
      - ./data.ms:/data.ms
    restart: always
    depends_on:
      - postgres
      - redis
  minio:
    image: quay.io/minio/minio:RELEASE.2023-11-01T01-57-10Z-cpuv1
    container_name: minio
    command: server --console-address ":9001" /data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./minio-data:/data
    healthcheck:
      test: ['CMD', 'mc', 'ready', 'local']
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres
      - redis
networks:
  web:
volumes:
  pgdata:
  exclude:
    driver: local
