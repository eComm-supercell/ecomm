generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  createdAt               DateTime               @default(now()) @db.Timestamp(6)
  updatedAt               DateTime               @default(now()) @db.Timestamp(6)
  deletedAt               DateTime?              @db.Timestamp(6)
  identifier              String?                @db.VarChar
  verified                Boolean                @default(false)
  lastLogin               DateTime?              @db.Timestamp(6)
  id                      Int                    @id @default(autoincrement())
  emailAddress            String?                @unique @db.VarChar
  phoneNumber             String?                @unique @db.VarChar
  authentication_methodId Int?                   @unique
  profile                 profile?
  session                 session[]
  authentication_method   authentication_method? @relation(fields: [authentication_methodId], references: [id])
  user_roles_role         user_roles_role[]
}

model profile {
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  firstName String    @db.VarChar
  lastName  String?   @db.VarChar
  id        Int       @id @default(autoincrement())
  userId    Int?      @unique
  gender    Gender
  age       Int?      @default(12)
  user      user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model authentication_method {
  createdAt             DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt             DateTime                  @default(now()) @db.Timestamp(6)
  passwordHash          String?                   @db.VarChar
  verificationToken     String?                   @db.VarChar
  passwordResetToken    String?                   @db.VarChar
  identifierChangeToken String?                   @db.VarChar
  pendingIdentifier     String?                   @db.VarChar
  externalIdentifier    String?                   @db.VarChar
  metadata              String?
  id                    Int                       @id @default(autoincrement())
  type                  UserType?
  strategy              AuthenticationStartegy?
  identifier            AuthenticationIdentifier?
  user                  user?
}

model session {
  createdAt              DateTime @default(now()) @db.Timestamp(6)
  updatedAt              DateTime @default(now()) @db.Timestamp(6)
  token                  String   @unique @db.VarChar
  expires                DateTime @db.Timestamp(6)
  invalidated            Boolean
  authenticationStrategy String?  @db.VarChar
  id                     Int      @id @default(autoincrement())
  type                   String   @db.VarChar
  userId                 Int?
  user                   user?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([type])
}

model role {
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @db.Timestamp(6)
  code            String            @db.VarChar
  description     String            @db.VarChar
  permissions     String
  id              Int               @id @default(autoincrement())
  user_roles_role user_roles_role[]
}

model user_roles_role {
  userId Int
  roleId Int
  role   role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
  @@index([userId])
}

model asset {
  createdAt             DateTime                @default(now()) @db.Timestamp(6)
  updatedAt             DateTime                @default(now()) @db.Timestamp(6)
  name                  String                  @db.VarChar
  type                  String                  @db.VarChar
  mimeType              String                  @db.VarChar
  width                 Int                     @default(0)
  height                Int                     @default(0)
  fileSize              Int
  source                String                  @db.VarChar
  preview               String                  @db.VarChar
  id                    Int                     @id @default(autoincrement())
  collection            collection[]
  product               product[]
  product_asset         product_asset[]
  product_variant       product_variant[]
  product_variant_asset product_variant_asset[]
}

model collection {
  createdAt                   DateTime                      @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime                      @default(now()) @db.Timestamp(6)
  isPrivate                   Boolean                       @default(false)
  featuredAssetId             Int?
  asset                       asset?                        @relation(fields: [featuredAssetId], references: [id], onUpdate: NoAction)
  collection_product_variants collection_product_variants[]
  collection_translation      collection_translation[]
  id                          Int                           @id @default(autoincrement())
  parentCollection            collection?                   @relation("collectionsHierarchy", fields: [parentCollectionId], references: [id])
  nestedCollectionss          collection[]                  @relation("collectionsHierarchy")
  parentCollectionId          Int?

  @@index([featuredAssetId], map: "collection_featuredAssetId")
}

model collection_product_variants {
  collectionId     Int
  productVariantId Int
  product_variant  product_variant @relation(fields: [productVariantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "collection_product_variants_product_varia_productVariantId_fkey")
  collection       collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([collectionId, productVariantId])
  @@index([collectionId], map: "collection_product_variants_collectionid")
  @@index([productVariantId], map: "collection_product_variants_productvariantid")
}

model collection_translation {
  createdAt    DateTime    @default(now()) @db.Timestamp(6)
  updatedAt    DateTime    @default(now()) @db.Timestamp(6)
  languageCode String      @db.VarChar
  name         String      @db.VarChar
  slug         String      @db.VarChar
  description  String
  id           Int         @id @default(autoincrement())
  baseId       Int?
  collection   collection? @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([baseId], map: "collection_translation_baseid_idx")
  @@index([slug])
}

model facet {
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @db.Timestamp(6)
  isPrivate         Boolean             @default(false)
  code              String              @unique @db.VarChar
  id                Int                 @id @default(autoincrement())
  facet_translation facet_translation[]
  facet_value       facet_value[]
}

model facet_translation {
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @db.Timestamp(6)
  languageCode String   @db.VarChar
  name         String   @db.VarChar
  id           Int      @id @default(autoincrement())
  baseId       Int?
  facet        facet?   @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([baseId], map: "facet_translation_baseid")
}

model facet_value {
  createdAt                                DateTime                                   @default(now()) @db.Timestamp(6)
  updatedAt                                DateTime                                   @default(now()) @db.Timestamp(6)
  code                                     String                                     @db.VarChar
  id                                       Int                                        @id @default(autoincrement())
  facetId                                  Int
  facet                                    facet                                      @relation(fields: [facetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  facet_value_translation                  facet_value_translation[]
  product_variant_facet_values_facet_value product_variant_facet_values_facet_value[]

  @@index([facetId], map: "facet_value_facetid")
}

model facet_value_translation {
  createdAt    DateTime     @default(now()) @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @db.Timestamp(6)
  languageCode String       @db.VarChar
  name         String       @db.VarChar
  id           Int          @id @default(autoincrement())
  baseId       Int?
  facet_value  facet_value? @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([baseId], map: "facet_value_translation_baseid")
}

model global_settings {
  createdAt           DateTime @default(now()) @db.Timestamp(6)
  updatedAt           DateTime @default(now()) @db.Timestamp(6)
  availableLanguages  String
  trackInventory      Boolean  @default(true)
  outOfStockThreshold Int      @default(0)
  id                  Int      @id @default(autoincrement())
}

model product {
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  updatedAt            DateTime               @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  enabled              Boolean                @default(true)
  id                   Int                    @id @default(autoincrement())
  featuredAssetId      Int?
  asset                asset?                 @relation(fields: [featuredAssetId], references: [id], onUpdate: NoAction)
  product_asset        product_asset[]
  product_option_group product_option_group[]
  product_translation  product_translation[]
  product_variant      product_variant[]

  @@index([featuredAssetId], map: "product_featuredassetid")
}

model product_asset {
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  assetId   Int
  position  Int
  productId Int
  id        Int      @id @default(autoincrement())
  asset     asset    @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assetId], map: "product_asset_assetid")
  @@index([productId], map: "product_asset_productid")
}

model product_option {
  createdAt                              DateTime                                 @default(now()) @db.Timestamp(6)
  updatedAt                              DateTime                                 @default(now()) @db.Timestamp(6)
  deletedAt                              DateTime?                                @db.Timestamp(6)
  code                                   String                                   @db.VarChar
  id                                     Int                                      @id @default(autoincrement())
  groupId                                Int
  product_option_group                   product_option_group                     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_option_translation             product_option_translation[]
  product_variant_options_product_option product_variant_options_product_option[]

  @@index([groupId], map: "product_option_groupid")
}

model product_option_group {
  createdAt                        DateTime                           @default(now()) @db.Timestamp(6)
  updatedAt                        DateTime                           @default(now()) @db.Timestamp(6)
  deletedAt                        DateTime?                          @db.Timestamp(6)
  code                             String                             @db.VarChar
  id                               Int                                @id @default(autoincrement())
  productId                        Int?
  product_option                   product_option[]
  product                          product?                           @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_option_group_translation product_option_group_translation[]

  @@index([productId], map: "product_option_group_productid")
}

model product_option_group_translation {
  createdAt            DateTime              @default(now()) @db.Timestamp(6)
  updatedAt            DateTime              @default(now()) @db.Timestamp(6)
  languageCode         String                @db.VarChar
  name                 String                @db.VarChar
  id                   Int                   @id @default(autoincrement())
  baseId               Int?
  product_option_group product_option_group? @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([baseId], map: "product_option_group_translation_baseid")
}

model product_option_translation {
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  updatedAt      DateTime        @default(now()) @db.Timestamp(6)
  languageCode   String          @db.VarChar
  name           String          @db.VarChar
  id             Int             @id @default(autoincrement())
  baseId         Int?
  product_option product_option? @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([baseId], map: "product_option_translation_baseid")
}

model product_translation {
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @db.Timestamp(6)
  languageCode String   @db.VarChar
  name         String   @db.VarChar
  slug         String   @db.VarChar
  description  String
  id           Int      @id @default(autoincrement())
  baseId       Int?
  product      product? @relation(fields: [baseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([slug], map: "IDX_f4a2ec16ba86d277b6faa0b67b")
  @@index([baseId], map: "product_translation_baseid")
}

model product_variant {
  createdAt                                   DateTime                                   @default(now()) @db.Timestamp(6)
  updatedAt                                   DateTime                                   @default(now()) @db.Timestamp(6)
  deletedAt                                   DateTime?                                  @db.Timestamp(6)
  enabled                                     Boolean                                    @default(true)
  sku                                         String                                     @db.VarChar
  outOfStockThreshold                         Int                                        @default(0)
  useGlobalOutOfStockThreshold                Boolean                                    @default(true)
  trackInventory                              String                                     @default("INHERIT") @db.VarChar
  id                                          Int                                        @id @default(autoincrement())
  productId                                   Int?
  featuredAssetId                             Int?
  collection_product_variants_product_variant collection_product_variants[]
  asset                                       asset?                                     @relation(fields: [featuredAssetId], references: [id], onUpdate: NoAction)
  product                                     product?                                   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_variant_asset                       product_variant_asset[]
  product_variant_facet_values_facet_value    product_variant_facet_values_facet_value[]
  product_variant_options_product_option      product_variant_options_product_option[]
  product_variant_price                       product_variant_price[]
  product_variant_translation                 product_variant_translation[]

  @@index([featuredAssetId], map: "product_variant_featuredassetid")
  @@index([productId], map: "product_variant_productid")
}

model product_variant_asset {
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  updatedAt        DateTime        @default(now()) @db.Timestamp(6)
  assetId          Int
  position         Int
  productVariantId Int
  id               Int             @id @default(autoincrement())
  asset            asset           @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_variant  product_variant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assetId], map: "product_variant_asset_id")
  @@index([productVariantId], map: "product_variant_asset_prod_variantid")
}

model product_variant_facet_values_facet_value {
  productVariantId Int
  facetValueId     Int
  facet_value      facet_value     @relation(fields: [facetValueId], references: [id], onDelete: Cascade)
  product_variant  product_variant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@id([productVariantId, facetValueId])
  @@index([facetValueId], map: "product_variant_facet_values_facet_value_facetvalueid")
  @@index([productVariantId], map: "product_variant_facet_values_facet_value_productvariantid")
}

model product_variant_options_product_option {
  productVariantId Int
  productOptionId  Int
  product_option   product_option  @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  product_variant  product_variant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@id([productVariantId, productOptionId])
  @@index([productVariantId], map: "product_variant_options_product_option_productvariantid")
}

model product_variant_price {
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
  currencyCode    String           @db.VarChar
  id              Int              @id @default(autoincrement())
  channelId       Int?
  price           Int
  variantId       Int?
  product_variant product_variant? @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([variantId], map: "product_variant_price_variantid")
}

model product_variant_translation {
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  updatedAt       DateTime         @default(now()) @db.Timestamp(6)
  languageCode    String           @db.VarChar
  name            String           @db.VarChar
  id              Int              @id @default(autoincrement())
  baseId          Int?
  product_variant product_variant? @relation(fields: [baseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([baseId], map: "product_variant_translation_baseid")
}

enum UserType {
  CUSTOMER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum AuthenticationStartegy {
  NATIVE
  OAUTH
}

enum AuthenticationIdentifier {
  GOOGLE
}

enum DaysOff {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

enum ShopStatus {
  pending
  approved
  banned
  closed
  active
  paused
  busy
}

enum ShopType {
  retaile
  wholesale
  restaurant
  small_business
}
