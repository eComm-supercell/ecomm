generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model administrator {
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  firstName    String    @db.VarChar
  lastName     String    @db.VarChar
  emailAddress String    @unique() @db.VarChar
  id           Int       @id() @default(autoincrement())
  userId       Int?      @unique()
  user         user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model authentication_method {
  createdAt             DateTime @default(now()) @db.Timestamp(6)
  updatedAt             DateTime @default(now()) @db.Timestamp(6)
  identifier            String?  @db.VarChar
  passwordHash          String?  @db.VarChar
  verificationToken     String?  @db.VarChar
  passwordResetToken    String?  @db.VarChar
  identifierChangeToken String?  @db.VarChar
  pendingIdentifier     String?  @db.VarChar
  strategy              String?  @db.VarChar
  externalIdentifier    String?  @db.VarChar
  metadata              String?
  id                    Int      @id() @default(autoincrement())
  type                  String   @db.VarChar
  userId                Int?
  user                  user?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([type])
}

model customer {
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @default(now()) @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  title        String?   @db.VarChar
  firstName    String    @db.VarChar
  lastName     String    @db.VarChar
  phoneNumber  String?   @db.VarChar
  emailAddress String    @db.VarChar
  id           Int       @id() @default(autoincrement())
  userId       Int?      @unique()
  user         user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  updatedAt       DateTime          @default(now()) @db.Timestamp(6)
  code            String            @db.VarChar
  description     String            @db.VarChar
  permissions     String
  id              Int               @id() @default(autoincrement())
  user_roles_role user_roles_role[]
}

model session {
  createdAt              DateTime @default(now()) @db.Timestamp(6)
  updatedAt              DateTime @default(now()) @db.Timestamp(6)
  token                  String   @unique() @db.VarChar
  expires                DateTime @db.Timestamp(6)
  invalidated            Boolean
  authenticationStrategy String?  @db.VarChar
  id                     Int      @id() @default(autoincrement())
  type                   String   @db.VarChar
  userId                 Int?
  user                   user?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([type])
}

model user {
  createdAt             DateTime                @default(now()) @db.Timestamp(6)
  updatedAt             DateTime                @default(now()) @db.Timestamp(6)
  deletedAt             DateTime?               @db.Timestamp(6)
  identifier            String                  @db.VarChar
  verified              Boolean                 @default(false)
  lastLogin             DateTime?               @db.Timestamp(6)
  id                    Int                     @id() @default(autoincrement())
  administrator         administrator?
  authentication_method authentication_method[]
  customer              customer?
  session               session[]
  user_roles_role       user_roles_role[]
}

model user_roles_role {
  userId Int
  roleId Int
  role   role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
  @@index([userId])
}
